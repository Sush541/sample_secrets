name: Secret Scan with Before/After Remediation

on:
  workflow_dispatch:  # Manual trigger for demo
  push:
    branches:
      - main

jobs:
  scan_and_remediate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # STEP 1: Create dummy secrets that GitLeaks will detect
      - name: Create detectable secrets for demo
        run: |
          # Create file with detectable secrets
          cat > demo_secrets.py << 'EOF'
          # Demo secrets file - DO NOT USE IN PRODUCTION
          
          import boto3
          
          # AWS credentials (fake but detectable pattern)
          AWS_ACCESS_KEY_ID = "AKIAIOSFODNN7EXAMPLE"
          AWS_SECRET_ACCESS_KEY = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
          
          # GitHub token (fake but detectable pattern)  
          GITHUB_TOKEN = "ghp_1234567890abcdef1234567890abcdef12345678"
          
          # Database connection
          db_connection = "mysql://user:password123@localhost:3306/database"
          
          def connect_aws():
              client = boto3.client(
                  's3',
                  aws_access_key_id=AWS_ACCESS_KEY_ID,
                  aws_secret_access_key=AWS_SECRET_ACCESS_KEY
              )
              return client
          EOF
          
          # Commit the secrets file
          git config --global user.name "Demo Bot"
          git config --global user.email "demo@example.com"
          git add demo_secrets.py
          git commit -m "Add demo secrets for scanning demo"
          
          echo "Demo secrets created and committed"

      # STEP 2: Run initial scan (BEFORE remediation)
      - name: Run Gitleaks scan - BEFORE remediation
        id: scan_before
        continue-on-error: true
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --report-format json --report-path=gitleaks-before.json

      # STEP 3: Remediate secrets (remove the secrets file)
      - name: Remediate secrets
        run: |
          echo "Remediating detected secrets..."
          
          # Remove the secrets file
          rm -f demo_secrets.py
          
          # Create a secure version using environment variables
          cat > secure_demo.py << 'EOF'
          # Secure version - uses environment variables
          import os
          import boto3
          
          # Use environment variables instead of hardcoded secrets
          AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
          AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
          GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
          
          # Database connection from environment
          db_connection = os.environ.get('DATABASE_URL')
          
          def connect_aws():
              client = boto3.client(
                  's3',
                  aws_access_key_id=AWS_ACCESS_KEY_ID,
                  aws_secret_access_key=AWS_SECRET_ACCESS_KEY
              )
              return client
          EOF
          
          # Commit the remediation
          git add .
          git commit -m "Security remediation: Replace hardcoded secrets with environment variables"
          
          echo "Secrets successfully remediated!"

      # STEP 4: Run scan again (AFTER remediation)
      - name: Run Gitleaks scan - AFTER remediation
        id: scan_after
        continue-on-error: true
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --report-format json --report-path=gitleaks-after.json

      # STEP 5: Generate enhanced comparison HTML report
      - name: Generate Before/After comparison report
        run: |
          cat > compare-report.js << 'EOF'
          const fs = require('fs');
          
          function generateReportSection(filename, title) {
            let html = `<h2 style="color: #333; border-bottom: 2px solid #007acc; padding-bottom: 5px;">${title}</h2>`;
            
            if (fs.existsSync(filename)) {
              try {
                const data = JSON.parse(fs.readFileSync(filename, 'utf8'));
                if (Array.isArray(data) && data.length > 0) {
                  html += `<p style="color: red; font-weight: bold;">‚ö†Ô∏è ${data.length} leak(s) detected</p>`;
                  html += '<table style="border-collapse: collapse; width: 100%; margin: 10px 0;">';
                  html += '<thead><tr style="background-color: #f8f9fa; border: 1px solid #dee2e6;">';
                  html += '<th style="padding: 12px; border: 1px solid #dee2e6; text-align: left;">File</th>';
                  html += '<th style="padding: 12px; border: 1px solid #dee2e6; text-align: left;">Line</th>';
                  html += '<th style="padding: 12px; border: 1px solid #dee2e6; text-align: left;">Secret Type</th>';
                  html += '<th style="padding: 12px; border: 1px solid #dee2e6; text-align: left;">Rule ID</th>';
                  html += '<th style="padding: 12px; border: 1px solid #dee2e6; text-align: left;">Author</th>';
                  html += '<th style="padding: 12px; border: 1px solid #dee2e6; text-align: left;">Date</th>';
                  html += '</tr></thead><tbody>';
                  
                  data.forEach((d, index) => {
                    const rowColor = index % 2 === 0 ? '#ffffff' : '#f8f9fa';
                    html += `<tr style="background-color: ${rowColor}; border: 1px solid #dee2e6;">`;
                    html += `<td style="padding: 8px; border: 1px solid #dee2e6;">${d.File || 'N/A'}</td>`;
                    html += `<td style="padding: 8px; border: 1px solid #dee2e6;">${d.StartLine || d.Line || 'N/A'}</td>`;
                    html += `<td style="padding: 8px; border: 1px solid #dee2e6; color: red; font-weight: bold;">***REDACTED***</td>`;
                    html += `<td style="padding: 8px; border: 1px solid #dee2e6;">${d.RuleID || 'N/A'}</td>`;
                    html += `<td style="padding: 8px; border: 1px solid #dee2e6;">${d.Author || 'Demo Bot'}</td>`;
                    html += `<td style="padding: 8px; border: 1px solid #dee2e6;">${d.Date ? new Date(d.Date).toLocaleDateString() : 'Today'}</td>`;
                    html += `</tr>`;
                  });
                  html += '</tbody></table>';
                } else {
                  html += '<p style="color: green; font-weight: bold; font-size: 16px;">‚úÖ No leaks detected</p>';
                }
              } catch (e) {
                html += '<p style="color: green; font-weight: bold; font-size: 16px;">‚úÖ No leaks detected</p>';
              }
            } else {
              html += '<p style="color: green; font-weight: bold; font-size: 16px;">‚úÖ No leaks detected</p>';
            }
            return html;
          }
          
          let fullReport = `
          <div style="font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px;">
            <h1 style="color: #007acc; text-align: center; border-bottom: 3px solid #007acc; padding-bottom: 10px;">
              üîí GitLeaks Security Scan Report
            </h1>
            <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
              <p><strong>Repository:</strong> ${{ github.repository }}</p>
              <p><strong>Scan Date:</strong> ${new Date().toISOString()}</p>
              <p><strong>Workflow:</strong> Before/After Remediation Demo</p>
            </div>
            <hr style="margin: 30px 0; border: 1px solid #dee2e6;">
          `;
          
          fullReport += generateReportSection('gitleaks-before.json', 'üîç BEFORE Remediation');
          fullReport += '<hr style="margin: 30px 0; border: 1px solid #dee2e6;">';
          fullReport += generateReportSection('gitleaks-after.json', '‚úÖ AFTER Remediation');
          
          fullReport += `
            <hr style="margin: 30px 0; border: 1px solid #dee2e6;">
            <div style="background-color: #e7f3ff; padding: 15px; border-radius: 5px; text-align: center;">
              <p><em>This report was generated automatically by GitHub Actions.</em></p>
              <p><em>For security reasons, actual secret values have been redacted.</em></p>
            </div>
          </div>
          `;
          
          fs.writeFileSync('comparison-report.html', fullReport);
          console.log('Enhanced comparison report generated successfully');
          EOF
          
          node compare-report.js

      # STEP 6: Read the comparison report for email
      - name: Read comparison report
        id: read_report
        run: |
          REPORT=$(cat comparison-report.html)
          echo "report_body<<EOF" >> $GITHUB_OUTPUT
          echo "$REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # STEP 7: Send comprehensive email with before/after results
      - name: Send before/after comparison email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "üîí GitLeaks Before/After Remediation Report - ${{ github.repository }}"
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
          content_type: text/html
          body: ${{ steps.read_report.outputs.report_body }}

      # STEP 8: Upload reports as artifacts
      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-comparison-reports
          path: |
            gitleaks-before.json
            gitleaks-after.json
            comparison-report.html

      # STEP 9: Cleanup demo files
      - name: Cleanup demo files
        run: |
          git config --global user.name "Cleanup Bot"
          git config --global user.email "cleanup@example.com"
          rm -f demo_secrets.py secure_demo.py
          git add .
          git commit -m "Cleanup: Remove demo files after security scan" || true

      # STEP 10: Job Summary
      - name: Job Summary
        run: |
          echo "## üìä Security Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Before/After comparison report generated and emailed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìß **Email sent to:** \`${{ secrets.TO_EMAIL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîç **Scan Process:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Created demo secrets with detectable patterns" >> $GITHUB_STEP_SUMMARY
          echo "2. Scanned for vulnerabilities (BEFORE)" >> $GITHUB_STEP_SUMMARY
          echo "3. Remediated by replacing hardcoded secrets with env vars" >> $GITHUB_STEP_SUMMARY
          echo "4. Scanned again to verify remediation (AFTER)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Reports available as artifacts for download**" >> $GITHUB_STEP_SUMMARY
