name: Secret Scan with Before/After Remediation

on:
  workflow_dispatch:  # Manual trigger for demo
  push:
    branches:
      - main

jobs:
  scan_and_remediate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # STEP 1: Run initial scan (BEFORE remediation)
      - name: Run Gitleaks scan - BEFORE remediation
        id: scan_before
        continue-on-error: true  # Don't fail job if secrets found
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --report-format json --report-path=gitleaks-before.json

      # STEP 2: Simulate remediation (remove/rotate secrets)
      - name: Remediate secrets (demo)
        run: |
          # This is where you would normally:
          # 1. Remove secrets from files
          # 2. Rotate API keys/tokens
          # 3. Update configuration to use environment variables
          
          # For demo purposes, let's create/remove a dummy secret file
          echo "Creating dummy secret for demonstration..."
          echo "aws_access_key_id = AKIAIOSFODNN7EXAMPLE" > temp_secret.txt
          echo "aws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" >> temp_secret.txt
          
          # Commit this (simulates the "before" state with secrets)
          git config --global user.name "Secret Scanner Bot"
          git config --global user.email "scanner@example.com"
          git add temp_secret.txt
          git commit -m "Add temporary secrets for demo" || true
          
          # Now "remediate" by removing the file
          rm -f temp_secret.txt
          git add . || true
          git commit -m "Remediate: Remove exposed secrets" || true
          
          echo "Secrets remediated successfully"

      # STEP 3: Run scan again (AFTER remediation)  
      - name: Run Gitleaks scan - AFTER remediation
        id: scan_after
        continue-on-error: true
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --report-format json --report-path=gitleaks-after.json

      # STEP 4: Generate comparison HTML report
      - name: Generate Before/After comparison report
        run: |
          cat > compare-report.js << 'EOF'
          const fs = require('fs');
          
          function generateReportSection(filename, title) {
            let html = `<h2>${title}</h2>`;
            if (fs.existsSync(filename)) {
              try {
                const data = JSON.parse(fs.readFileSync(filename, 'utf8'));
                if (Array.isArray(data) && data.length > 0) {
                  html += '<table border="1" cellpadding="5" cellspacing="0">';
                  html += '<tr style="background-color: #f0f0f0;"><th>File</th><th>Line</th><th>Secret (Redacted)</th><th>Rule</th><th>Author</th><th>Date</th></tr>';
                  data.forEach(d => {
                    html += `<tr>`;
                    html += `<td>${d.File || d.file || 'N/A'}</td>`;
                    html += `<td>${d.StartLine || d.line || 'N/A'}</td>`;
                    html += `<td>***REDACTED***</td>`;
                    html += `<td>${d.RuleID || d.rule || 'N/A'}</td>`;
                    html += `<td>${d.Author || 'N/A'}</td>`;
                    html += `<td>${d.Date || 'N/A'}</td>`;
                    html += `</tr>`;
                  });
                  html += '</table>';
                } else {
                  html += '<p style="color: green;">‚úÖ No leaks detected</p>';
                }
              } catch (e) {
                html += '<p style="color: green;">‚úÖ No leaks detected</p>';
              }
            } else {
              html += '<p style="color: green;">‚úÖ No leaks detected</p>';
            }
            return html;
          }
          
          let fullReport = '<h1>GitLeaks Security Scan Report</h1>';
          fullReport += '<p><strong>Repository:</strong> ${{ github.repository }}</p>';
          fullReport += '<p><strong>Scan Date:</strong> ' + new Date().toISOString() + '</p>';
          fullReport += '<hr>';
          
          fullReport += generateReportSection('gitleaks-before.json', 'üîç BEFORE Remediation');
          fullReport += '<hr>';
          fullReport += generateReportSection('gitleaks-after.json', '‚úÖ AFTER Remediation');
          
          fullReport += '<hr><p><em>This report was generated automatically by GitHub Actions.</em></p>';
          
          fs.writeFileSync('comparison-report.html', fullReport);
          console.log('Comparison report generated successfully');
          EOF
          
          node compare-report.js

      # STEP 5: Read the comparison report for email
      - name: Read comparison report
        id: read_report
        run: |
          REPORT=$(cat comparison-report.html)
          echo "report_body<<EOF" >> $GITHUB_OUTPUT
          echo "$REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # STEP 6: Send comprehensive email with before/after results
      - name: Send before/after comparison email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "üîí GitLeaks Before/After Remediation Report - ${{ github.repository }}"
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
          content_type: text/html
          body: ${{ steps.read_report.outputs.report_body }}

      # STEP 7: Upload reports as artifacts (for download/review)
      - name: Upload scan reports
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-comparison-reports
          path: |
            gitleaks-before.json
            gitleaks-after.json
            comparison-report.html

      # STEP 8: Summary
      - name: Job Summary
        run: |
          echo "## üìä Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Before/After comparison report generated and emailed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìß Email sent to: \`${{ secrets.TO_EMAIL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ Reports available as artifacts for download" >> $GITHUB_STEP_SUMMARY
